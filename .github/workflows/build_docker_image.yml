name: Build Docker Image
on:
  push:
    branches:
      - main
      - master
      - sprint
      - release
    tags:
      - v*
  pull_request:
    types:
      - labeled
      - synchronize
      - opened
      - reopened

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Detect if the pull request, branch, or tag should build the docker image.
      # The rest of the steps after buildable should be filtered with the expression
      #   if: steps.buildable.outputs.result == 'true'
      - name: Check For Build Image Label
        id: check_for_build_image
        if: contains(github.event.pull_request.labels.*.name, 'Build Docker Image')
        run: echo "::set-output name=result::true"
      - name: Check For QA Ready Label
        id: check_for_qa_ready
        if: contains(github.event.pull_request.labels.*.name, 'QA Ready')
        run: echo "::set-output name=result::true"
      - name: Buildable
        id: buildable
        if: github.event_name == 'push' || steps.check_for_build_image.outputs.result == 'true' || steps.check_for_build_image.outputs.result == 'true'
        run: echo "::set-output name=result::true"

      # Login to the ECR docker registry
      # - name: Configure AWS credentials
      #   if: steps.buildable.outputs.result == 'true'
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-2
      # - name: Login to Amazon ECR
      #   if: steps.buildable.outputs.result == 'true'
      #   uses: aws-actions/amazon-ecr-login@v1

      # Build the docker image
      - name: Checkout
        if: steps.buildable.outputs.result == 'true'
        uses: actions/checkout@v2
      # - name: Set up Docker Buildx
      #   if: steps.buildable.outputs.result == 'true'
      #   uses: docker/setup-buildx-action@v1
      # - name: Cache Docker layers
      #   if: steps.buildable.outputs.result == 'true'
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-
      - name: Set Docker Tags
        id: set_docker_tags
        if: steps.buildable.outputs.result == 'true'
        run: |
          tags=$(bin/docker_build_tags)
          echo $tags
          echo "::set-output name=tags::${tags}"
      - name: Docker Build
        id: docker_build
        if: steps.buildable.outputs.result == 'true'
        env:
          image_tags: ${{ steps.set_docker_tags.outputs.tags }}
        run: |
          echo "::set-output name=tag::${image_tags}"
      # This is necessary so the cache does not grow until it hits GitHub's limit of 5GB.
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      # - name: Docker cache fix
      #   if: steps.buildable.outputs.result == 'true'
      #   run: |
      #     rm -rf /tmp/.buildx-cache
      #     if [ -d /tmp/.buildx-cache-new ]; then
      #       mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      #     else
      #       echo "/tmp/.buildx-cache-new does not exist"
      #     fi

      # Update the pull request with a comment including the Docker image tag.
      # - name: Add Docker image comment
      #   if: github.event_name == 'pull_request' && steps.buildable.outputs.result == 'true'
      #   uses: actions/github-script@v4
      #   env:
      #     DOCKER_TAG: ${{ steps.build.outputs.tag }}
      #   with:
      #     script: |
      #       github.issues.createComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #         body: ":computer: Docker image built with tag: `" + process.env.DOCKER_TAG + "`"
      #       })

      # The "Build Docker Image" label on a pull request is used to trigger a one time only build
      # of the Docker image, so remove it after the build has succeeded.
      # - name: Remove Build Image Tag
      #   if: steps.check_for_build_image.outputs.result == 'truex'
      #   uses: actions/github-script@v4
      #   with:
      #     script: |
      #       github.issues.removeLabel({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #         name: "Build Docker Image"
      #       })
      #       console.log('Remove "Build Docker Image" label')
