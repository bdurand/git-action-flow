name: Build Docker Image

on:
  push:
    branches:
      - main
      - master
      - sprint
      - release
    tags:
      - v*
  pull_request:
    types:
      - labeled
      - synchronize
      - opened
      - reopened

concurrency: build_docker_image-${{ github.ref }}

jobs:
  build_docker_image:
    name: Build Docker Image If Needed
    runs-on: ubuntu-latest
    steps:
      # Detect if the pull request, branch, or tag should build the docker image.
      # The rest of the steps after buildable should be filtered with the expression
      #   if: steps.buildable.outputs.result
      - name: Check For QA Ready Label
        id: check_for_qa_ready
        if: contains(github.event.pull_request.labels.*.name, 'QA Ready')
        run: echo "::set-output name=result::true"
      - name: Check For Build Image Label
        id: check_for_build_image
        if: contains(github.event.pull_request.labels.*.name, 'Build Docker Image')
        run: echo "::set-output name=result::true"
      - name: Buildable
        id: buildable
        if: github.event_name == 'push' || steps.check_for_qa_ready.outputs.result || steps.check_for_build_image.outputs.result
        run: echo "::set-output name=result::true"

      # Setup the build state in the PR. The Build Docker Image label is removed and a comment
      # is added indicating the image is being built.
      - name: Remove Build Image Tag
        if: steps.check_for_build_image.outputs.result
        uses: actions/github-script@v4
        with:
          script: |
            github.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              name: "Build Docker Image"
            })
            console.log('Remove "Build Docker Image" label')
      - name: Add Docker building comment
        id: pull_request_comment
        if: github.event_name == 'pull_request' && steps.buildable.outputs.result
        uses: actions/github-script@v4
        env:
          DOCKER_TAG: ${{ steps.set_docker_tags.outputs.docker_tags }}
        with:
          script: |
            let body = ":construction: *Building Docker image...*"
            let response = await github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            })
            return response.data.id

      # Build the docker image
      - name: Get tags for Docker image
        id: set_docker_tags
        if: steps.buildable.outputs.result
        run: |
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
            REF_TAG="pr-$(cat $GITHUB_EVENT_PATH | jq -r .pull_request.number)"
          else
            REF_TAG=$(echo $GITHUB_REF | sed -E 's/refs\/(heads|tags)\///' | grep -v '/')
          fi
          echo "::set-output name=docker_tags::${GITHUB_SHA::8},${REF_TAG}"
      # Login to the ECR docker registry
      # - name: Configure AWS credentials
      #   if: steps.buildable.outputs.result
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-2
      # - name: Login to Amazon ECR
      #   if: steps.buildable.outputs.result
      #   uses: aws-actions/amazon-ecr-login@v1
      # - name: Checkout
      #   if: steps.buildable.outputs.result
      #   uses: actions/checkout@v2
      # - name: Set up Docker Buildx
      #   if: steps.buildable.outputs.result
      #   uses: docker/setup-buildx-action@v1
      # - name: Cache Docker layers
      #   if: steps.buildable.outputs.result
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-
      # - name: Docker Build
      #   id: docker_build
      #   if: steps.buildable.outputs.result
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     build-args: REVISION
      #     push: false
      #     tags: ${{ steps.set_docker_tags.outputs.docker_tags }}
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache-new
      # - name: Docker cache fix
      #   if: steps.buildable.outputs.result
      #   run: |
      #     # This is necessary so the cache does not grow until it hits GitHub's limit of 5GB.
      #     # https://github.com/docker/build-push-action/issues/252
      #     # https://github.com/moby/buildkit/issues/1896
      #     rm -rf /tmp/.buildx-cache
      #     if [ -d /tmp/.buildx-cache-new ]; then
      #       mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      #     else
      #       echo "/tmp/.buildx-cache-new does not exist"
      #     fi

      # Update the pull request comment with the tags for the image that was built.
      - name: Update Docker build comment
        if: steps.pull_request_comment.outputs.result && steps.set_docker_tags.outputs.docker_tags
        uses: actions/github-script@v4
        env:
          DOCKER_TAG: ${{ steps.set_docker_tags.outputs.docker_tags }}
        with:
          script: |
            let body = ":computer: Docker image built with tags:"
            process.env.DOCKER_TAG.split(',').forEach(tag => {
              body += "\n* `" + tag + '`'
            })
            github.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.pull_request_comment.outputs.result }},
              body: body
            })
